import java.util.*;

public class FibonacciHeap {
    private static class Node {
        int key;
        String value;
        int degree;
        boolean marked;
        Node parent;
        Node child;
        Node left;
        Node right;
        
        Node(int key, String value) {
            this.key = key;
            this.value = value;
            this.degree = 0;
            this.marked = false;
            this.parent = null;
            this.child = null;
            this.left = this;
            this.right = this;
        }
    }
    
    private Node minNode;
    private int count;
    
    public FibonacciHeap() {
        minNode = null;
        count = 0;
    }
    
    public boolean isEmpty() {
        return minNode == null;
    }
    
    public Node insert(int key, String value) {
        Node node = new Node(key, value);
        if (minNode == null) {
            minNode = node;
        } else {
            addToRootList(node);
            if (key < minNode.key) {
                minNode = node;
            }
        }
        count++;
        return node;
    }
    
    private void addToRootList(Node node) {
        node.left = minNode;
        node.right = minNode.right;
        minNode.right.left = node;
        minNode.right = node;
    }
    
    public String findMin() {
        return minNode != null ? minNode.value : null;
    }
    
    public String extractMin() {
        if (isEmpty()) return null;
        
        Node minNodePtr = minNode;
        if (minNodePtr.child != null) {
            Node child = minNodePtr.child;
            do {
                Node nextChild = child.right;
                addToRootList(child);
                child.parent = null;
                child = nextChild;
            } while (child != minNodePtr.child);
        }
        
        minNodePtr.left.right = minNodePtr.right;
        minNodePtr.right.left = minNodePtr.left;
        
        if (minNodePtr == minNodePtr.right) {
            minNode = null;
        } else {
            minNode = minNodePtr.right;
            consolidate();
        }
        
        count--;
        return minNodePtr.value;
    }
    
    private void consolidate() {
        if (minNode == null) return;
        
        Map<Integer, Node> degreeTable = new HashMap<>();
        List<Node> nodes = new ArrayList<>();
        Node current = minNode;
        
        do {
            nodes.add(current);
            current = current.right;
        } while (current != minNode);
        
        for (Node node : nodes) {
            int degree = node.degree;
            while (degreeTable.containsKey(degree)) {
                Node other = degreeTable.get(degree);
                if (node.key > other.key) {
                    Node temp = node;
                    node = other;
                    other = temp;
                }
                link(other, node);
                degreeTable.remove(degree);
                degree++;
            }
            degreeTable.put(degree, node);
        }
        
        minNode = null;
        for (Node node : degreeTable.values()) {
            if (minNode == null || node.key < minNode.key) {
                minNode = node;
            }
        }
    }
    
    private void link(Node child, Node parent) {
        child.left.right = child.right;
        child.right.left = child.left;
        
        child.parent = parent;
        if (parent.child == null) {
            parent.child = child;
            child.left = child;
            child.right = child;
        } else {
            child.left = parent.child;
            child.right = parent.child.right;
            parent.child.right.left = child;
            parent.child.right = child;
        }
        
        parent.degree++;
        child.marked = false;
    }
    
    public static void main(String[] args) {
        System.out.println("Куча Фибоначчи (Java):");
        FibonacciHeap fibHeap = new FibonacciHeap();
        
        fibHeap.insert(5, "A");
        fibHeap.insert(3, "B");
        fibHeap.insert(8, "C");
        fibHeap.insert(1, "D");
        
        System.out.println("Минимальный элемент: " + fibHeap.findMin());
        System.out.print("Извлеченные элементы: ");
        while (!fibHeap.isEmpty()) {
            System.out.print(fibHeap.extractMin() + " ");
        }
        System.out.println();
    }
}
