import java.util.*;

class TreeNode {
    int value;
    TreeNode left;
    TreeNode right;
    
    TreeNode(int value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

public class BinaryTree {
    private TreeNode root;
    
    public BinaryTree() {
        root = null;
    }
    
    public void insert(int value) {
        root = insertRecursive(root, value);
    }
    
    private TreeNode insertRecursive(TreeNode node, int value) {
        if (node == null) {
            return new TreeNode(value);
        }
        
        if (value < node.value) {
            node.left = insertRecursive(node.left, value);
        } else if (value > node.value) {
            node.right = insertRecursive(node.right, value);
        }
        
        return node;
    }
    
    public boolean search(int value) {
        return searchRecursive(root, value) != null;
    }
    
    private TreeNode searchRecursive(TreeNode node, int value) {
        if (node == null || node.value == value) {
            return node;
        }
        
        if (value < node.value) {
            return searchRecursive(node.left, value);
        }
        
        return searchRecursive(node.right, value);
    }
    
    public List<Integer> inorderTraversal() {
        List<Integer> result = new ArrayList<>();
        inorderRecursive(root, result);
        return result;
    }
    
    private void inorderRecursive(TreeNode node, List<Integer> result) {
        if (node != null) {
            inorderRecursive(node.left, result);
            result.add(node.value);
            inorderRecursive(node.right, result);
        }
    }
    
    public List<Integer> findPath(int target) {
        List<Integer> path = new ArrayList<>();
        if (findPathRecursive(root, target, path)) {
            return path;
        }
        return null;
    }
    
    private boolean findPathRecursive(TreeNode node, int target, List<Integer> path) {
        if (node == null) {
            return false;
        }
        
        path.add(node.value);
        
        if (node.value == target) {
            return true;
        }
        
        if (findPathRecursive(node.left, target, path) || 
            findPathRecursive(node.right, target, path)) {
            return true;
        }
        
        path.remove(path.size() - 1);
        return false;
    }
    
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        int[] values = {8, 3, 10, 1, 6, 14, 4, 7, 13};
        
        for (int value : values) {
            tree.insert(value);
        }
        
        System.out.println("Inorder обход: " + tree.inorderTraversal());
        System.out.println("Поиск 6: " + (tree.search(6) ? "Найден" : "Не найден"));
        System.out.println("Поиск 20: " + (tree.search(20) ? "Найден" : "Не найден"));
        System.out.println("Путь к 13: " + tree.findPath(13));
        System.out.println("Путь к 25: " + tree.findPath(25));
    }
}
